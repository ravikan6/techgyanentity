// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  slug            String     @unique
  title           String
  description     String?
  content         String
  author          Author     @relation(fields: [authorId], references: [id])
  authorId        String     @db.ObjectId
  published       Boolean    @default(false)
  privacy         String     @default("PUBLIC")
  publishedAt     DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime?  @updatedAt
  deletedAt       DateTime?
  isDeleted       Boolean    @default(false)
  tags            String[]
  image           Image?
  comments        Comment[]
  claps           PostClap[]
  bookmarkUsers   User[]     @relation(fields: [bookmarkUserIds], references: [id])
  bookmarkUserIds String[]   @db.ObjectId
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  username  String?   @unique
  Author    Author[]
  password  String?   @default("")
  role      String    @default("USER")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  isDeleted Boolean   @default(false)
  image     Avatar?
  sex       String?
  dob       DateTime?

  following    Follower[]
  comments     Comment[]     @relation("commentByUser")
  commentClaps CommentClap[] @relation("commentClapsByUser")
  postClaps    PostClap[]
  bookmarks    Post[]        @relation(fields: [bookmarkIds], references: [id])
  bookmarkIds  String[]      @db.ObjectId
}

model Author {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.ObjectId
  name         String
  handle       String     @unique
  social       LinkType[]
  contactEmail String?
  bio          String?
  Post         Post[]
  image        Avatar?
  banner       Banner?
  followers    Follower[]
  comments     Comment[]
}

model Follower {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  author     Author   @relation(fields: [authorId], references: [id])
  authorId   String   @db.ObjectId
  follower   User     @relation(fields: [followerId], references: [id])
  followerId String   @db.ObjectId
  createdAt  DateTime @default(now())
}

model Comment {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  post      Post          @relation(fields: [postId], references: [id])
  postId    String        @db.ObjectId
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
  isDeleted Boolean       @default(false)
  user      User?         @relation("commentByUser", fields: [userId], references: [id])
  userId    String        @db.ObjectId
  author    Author?       @relation(fields: [authorId], references: [id])
  authorId  String        @db.ObjectId
  replies   Comment[]     @relation("CommentToReplies")
  parent    Comment?      @relation("CommentToReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  String?       @db.ObjectId
  claps     CommentClap[]
}

model CommentClap {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation("commentClapsByUser", fields: [userId], references: [id])
  userId    String   @db.ObjectId
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String   @db.ObjectId
  createdAt DateTime @default(now())
}

model PostClap {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

type Image {
  url      String
  alt      String?
  provider String? @default("cloudinary")
  caption  String?
  location String?
}

type Avatar {
  url      String
  provider String? @default("cloudinary")
}

type Banner {
  url      String
  provider String? @default("cloudinary")
}

type LinkType {
  id    String?
  url   String
  title String
}
